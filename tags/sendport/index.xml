<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SendPort on cskime.io</title>
    <link>https://cskime.github.io/tags/sendport/</link>
    <description>Recent content in SendPort on cskime.io</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Sep 2024 14:13:14 +0900</lastBuildDate>
    <atom:link href="https://cskime.github.io/tags/sendport/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Dart] Isolate 요약</title>
      <link>https://cskime.github.io/posts/isolate-summary/</link>
      <pubDate>Sat, 21 Sep 2024 14:13:14 +0900</pubDate>
      <guid>https://cskime.github.io/posts/isolate-summary/</guid>
      <description>Dart isolate 관련 문서들을 참고하여 isolate의 개념 및 동작방식을 요약한다. 참고한 문서 Concurrency in Dart | dart.dev Isolates | dart.dev Concurrency and isolates | Flutter docs Isolate 사용 이유 모든 Dart code는 기본적으로 main isolate에서 실행된다. Main isolates의 event loop는 UI paint, I/O, user input 등 UI 관련 event들을 처리한다. Main isolate에서 시간이 오래 걸리는 작업을 실행하면 event loop가 다음 repaint event 처리 시점을 놓치게 되면서 UI freezing이 발생할 수 있다.</description>
    </item>
  </channel>
</rss>
