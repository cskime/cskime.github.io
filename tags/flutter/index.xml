<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Flutter on cskime.io</title>
    <link>https://cskime.github.io/tags/flutter/</link>
    <description>Recent content in Flutter on cskime.io</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 Aug 2024 21:00:33 +0900</lastBuildDate>
    <atom:link href="https://cskime.github.io/tags/flutter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>화면 빈 곳을 tap해서 가상 키보드 닫기</title>
      <link>https://cskime.github.io/posts/flutter-unfocus/</link>
      <pubDate>Thu, 29 Aug 2024 21:00:33 +0900</pubDate>
      <guid>https://cskime.github.io/posts/flutter-unfocus/</guid>
      <description>Flutter app에서 TextField 등의 widget을 탭하면 해당 widget의 FocusNode가 활성화되면서 가상 키보드가 나타남 가상 키보드를 닫으려면 해당 widget의 FocusNode를 비활성화(unfocus) 시켜야 한다. FocusScope 사용 FocusScope는 FocusNode를 하나의 group으로 묶어서 관리할 때 사용하는 widget으로, Route가 push될 때 자동으로 생성되어 widget tree에 추가됨 FocusScope.of(context) method가 반환하는 FocusScopeNode는 FocusNode의 subclass로, FocusScope group 안에서 focus를 제어하는 객체 FocusScopeNode의 unfocus()를 호출해서 현재 focusing된 widget(e.g. TextField)을 unfocus 시킨다. FocusScope.of(context).unfocus(); 또는, requestFocus()에 새로운 FocusNode를 전달하여 이전 focus를 해제시킨다.</description>
    </item>
    <item>
      <title>Bottom fixed footer를 갖는 scrollable widget 만들기</title>
      <link>https://cskime.github.io/posts/fixed-footer-scrollview/</link>
      <pubDate>Fri, 16 Aug 2024 21:10:26 +0900</pubDate>
      <guid>https://cskime.github.io/posts/fixed-footer-scrollview/</guid>
      <description>이 글에서는 vertical direction scroll을 가정한다.
Overview Scrollable widget은 전체 content 높이가 화면 높이보다 작다면 scroll이 활성화되지 않고 content들이 상단 정렬된다. 아래는 SingleChildScrollView에 Column을 사용해서 content widget과 footer widget을 배치하는 예시이다.
Code Demo Footer widget을 화면 하단에 배치하기 위해 content와 footer widget 사이에 Spacer, Expanded와 같은 flexible widget을 사용하면 unbounded height error가 발생한다. Scrollable widget은 child widget에게 unbounded height constraint를 제안하는데, Spacer나 Expanded도 unbounded size를 갖기 때문이다.
Fixed Footer 구현 위 error를 해결하려면 아래와 같은 조건이 필요하다.</description>
    </item>
    <item>
      <title>🇰🇷 광복절 기념 태극기 그리기 🇰🇷</title>
      <link>https://cskime.github.io/posts/flutter-taegeukgi/</link>
      <pubDate>Thu, 15 Aug 2024 18:15:39 +0900</pubDate>
      <guid>https://cskime.github.io/posts/flutter-taegeukgi/</guid>
      <description>Overview 광복절을 기념해서 Flutter로 태극기를 그려봤다. (Repository)
태극기 도면을 참고했고, CustomPaint를 사용했다.
깃면 그리기 태극기 깃면의 가로:세로 비율은 3:2이므로, AspectRatio로 3:2 비율의 widget을 만든다. DecoratedBox를 사용해서 border를 그려준다. AspectRatio의 child에 LayoutBuilder를 사용해서 CustomPaint의 size를 깃면 size로 설정한다. CustomPaint는 이 수치를 기반으로 태극 문양과 괘의 layout을 계산한다. 태극 문양 그리기 태극 문양은 아래 두 단계에 걸쳐 그릴 수 있다.
빨간색과 파란색 반으로 나뉜 원을 그린다. 반지름을 지름으로 하는 빨간색, 파란색 원을 왼쪽, 오른쪽에 덮어서 그린다.</description>
    </item>
    <item>
      <title>Flutter Package 개발 기록 - customizable_text</title>
      <link>https://cskime.github.io/posts/customizable_text_package_review/</link>
      <pubDate>Wed, 26 Jun 2024 15:11:00 +0900</pubDate>
      <guid>https://cskime.github.io/posts/customizable_text_package_review/</guid>
      <description>개발 동기 노마드코더 챌린지 과제 중 아래와 같은 text UI를 구현하는 부분이 있었다. 회원가입 중 이용 약관이나 개인 정보 처리 방침 등을 사용자에게 안내하고 관련 외부 문서로 이동하여 확인할 수 있게 만드는 보편적인 UI 이다.
Flutter에서 text에 다양한 style을 적용할 때 RichText 또는 Text.rich를 사용하므로, 이 UI를 구현하기 위해 아래와 같이 코드를 작성했다.
이렇게 코드를 작성하면 몇 가지 문제가 있다.
다른 style을 사용할 text를 직접 분류해서 나누어 작성해야 하므로 실수할 가능성이 있다.</description>
    </item>
    <item>
      <title>Flutter Constraint 이해하기</title>
      <link>https://cskime.github.io/posts/flutter-constraints/</link>
      <pubDate>Tue, 25 Jun 2024 16:09:00 +0900</pubDate>
      <guid>https://cskime.github.io/posts/flutter-constraints/</guid>
      <description>Flutter Constraint와 Layout Flutter는 3단계를 거쳐 widget의 layout을 결정한다.
Constraints go down : Parent widget이 child widget에 constraint를 제안한다. Sizes go up : Child widget은 constraint 범위 내의 size를 parent widget에 알려준다. Parent sets position : Parent widget은 자신의 alignment 정보와 child widget size를 사용해서 child widget의 position을 결정한다. 여기서 &amp;ldquo;constraint&amp;ldquo;란 size의 최대 ~ 최소값의 범위를 말한다. Flutter에서는 BoxConstraints class를 주로 사용하여 minWidth, minHeight, maxWidth, maxHeight을 정의한다.
const BoxConstraints({ this.minWidth = 0.</description>
    </item>
    <item>
      <title>Scrollable TabBar의 왼쪽 여백 제거하기</title>
      <link>https://cskime.github.io/posts/tabbar-remove-left-padding/</link>
      <pubDate>Sun, 23 Jun 2024 07:28:19 +0900</pubDate>
      <guid>https://cskime.github.io/posts/tabbar-remove-left-padding/</guid>
      <description>TabBar의 isScrollable을 true로 설정하면 왼쪽에 default padding이 잡힘 Flutter 3.16.0 버전부터 Material 3 디자인이 적용되면서, isScrollable이 true일 때 tabAlignment 속성의 기본값이 TabAlignment.startOffset이 됨 Material3 에서 TabBar의 기본 alignment Material2 에서 TabBar의 기본 alignment TabAlignment.startOffset은 왼쪽에 52px offset을 추가하기 때문에 왼쪽에 여백이 생기는 것 따라서, 아래 세 가지 방법으로 left offset을 제거할 수 있다. Material 3를 사용하지 않도록 설정 TabBar.tabAlignment를 TabAlignment.start로 설정 TabBar.padding에 EdgeInsets.only(left: 10)처럼 원하는 offset으로 override Reference Scrollable Tabs have a gap on the left | GitHub Issue Customizing tabs alignment using the new TabBar.</description>
    </item>
    <item>
      <title>ListView에 Clip.none 설정 시 item이 사라지는 문제</title>
      <link>https://cskime.github.io/posts/listview-clip-item-disappear/</link>
      <pubDate>Sat, 22 Jun 2024 07:27:19 +0900</pubDate>
      <guid>https://cskime.github.io/posts/listview-clip-item-disappear/</guid>
      <description>문제 상황 ListView를 Clip.none으로 설정하면 item들이 scroll될 때 ListView의 실제 영역을 벗어나서 화면 밖으로 사라질 때 까지 화면에 유지될 것이라고 예상 하지만 실제로는 item이 화면 밖으로 나가기 전에 먼저 화면에서 사라짐 이 ListView는 Padding 및 다른 widget들의 하위 widget 원인 분석 Flutter GitHub에 이미 같은 문제로 issue가 올라왔었다. 이 repo의 contributor에 따르면, 이것은 의도된 동작이라고 한다. it looks like this is working as intended.. The Padding around the ListView is what is causing this effect.</description>
    </item>
    <item>
      <title>Navigator.push로 띄운 route에서 InheritedWidget에 접근할 수 없는 문제</title>
      <link>https://cskime.github.io/posts/inherited-widget-unaccessible/</link>
      <pubDate>Sat, 25 May 2024 17:11:44 +0900</pubDate>
      <guid>https://cskime.github.io/posts/inherited-widget-unaccessible/</guid>
      <description>문제 상황 상위 위젯에서 추가한 InheritedWidget을 하위 widget에서 접근하지 못하는 문제 BuildContext.dependOnInheritedWidgetOfExactType이 null을 반환해서 property 및 method를 호출할 수 없음 예제 코드 문제를 재현하는 간단한 counter app
HomeScreen 및 DetailScreen은 버튼을 눌러서 count 증가
HomeScreen과 DetailScreen은 count 값(state) 공유
Count 값을 하위 widget에 공유하기 위한 InheritedWidget 생성
class CounterProvider extends InheritedWidget { const CounterProvider({ super.key, required super.child, required this.counter, required this.incrementCounter, }); final int counter; // ✅ count 값 공유 final void Function() incrementCounter; // ✅ count action 공유 @override bool updateShouldNotify(covariant InheritedWidget oldWidget) =&amp;gt; true; static CounterProvider?</description>
    </item>
  </channel>
</rss>
