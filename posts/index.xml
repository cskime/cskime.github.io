<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on cskime.io</title>
    <link>https://cskime.github.io/posts/</link>
    <description>Recent content in Posts on cskime.io</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 22 Sep 2024 18:35:28 +0900</lastBuildDate>
    <atom:link href="https://cskime.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Dart] fromJson constructor는 왜 factory로 만들까?</title>
      <link>https://cskime.github.io/posts/why-from-json-factory/</link>
      <pubDate>Sun, 22 Sep 2024 18:35:28 +0900</pubDate>
      <guid>https://cskime.github.io/posts/why-from-json-factory/</guid>
      <description>Overview Dart에서 JSON을 parsing하는 class를 만들 때 fromJson이라는 factory named constructor를 만들곤 한다.
class Person { final String name; final int age; Person({required this.name, required this.age}); // ✅ factory Person.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; Person(name: json[&amp;#34;name&amp;#34;], age: json[&amp;#34;age&amp;#34;]); } 그런데, fromJson constructor는 factory가 아니어도 아무 문제가 없다.
class Person { final String name; final int age; Person({required this.name, required this.age}); // ✅ Person.fromJson1(Map&amp;lt;String, dynamic&amp;gt; json) : name = json[&amp;#34;name&amp;#34;], age = json[&amp;#34;age&amp;#34;]; } Dart 문서의 예시에서도 fromJson을 factory constructor로 만들고 있다.</description>
    </item>
    <item>
      <title>[Dart] Isolate 요약</title>
      <link>https://cskime.github.io/posts/isolate-summary/</link>
      <pubDate>Sat, 21 Sep 2024 14:13:14 +0900</pubDate>
      <guid>https://cskime.github.io/posts/isolate-summary/</guid>
      <description>Dart isolate 관련 문서들을 참고하여 isolate의 개념 및 동작방식을 요약한다. 참고한 문서 Concurrency in Dart | dart.dev Isolates | dart.dev Concurrency and isolates | Flutter docs Isolate 사용 이유 모든 Dart code는 기본적으로 main isolate에서 실행된다. Main isolates의 event loop는 UI paint, I/O, user input 등 UI 관련 event들을 처리한다. Main isolate에서 시간이 오래 걸리는 작업을 실행하면 event loop가 다음 repaint event 처리 시점을 놓치게 되면서 UI freezing이 발생할 수 있다.</description>
    </item>
    <item>
      <title>[Dart] Understanding null safety</title>
      <link>https://cskime.github.io/posts/dart-understanding-null-safety/</link>
      <pubDate>Sun, 15 Sep 2024 15:25:01 +0900</pubDate>
      <guid>https://cskime.github.io/posts/dart-understanding-null-safety/</guid>
      <description>Overview 이 글은 Understanding null safety 문서의 내용을 바탕으로 Dart에서 null safety가 나온 배경 및 null safety의 동작 방식을 쉽게 이해하기 위해 작성하였다. 기본 문법적인 설명들을 제외하고 null safety의 원리를 이해하는데 필요하다고 생각되는 부분들만 정리했기 때문에 원문의 일부 내용이 누락되어 있고 설명하는 순서도 다르다. 빠르게 Dart null safety의 동작 방식에 대해 이해하는 것이 목적이라면 이 글을 이해하는 것으로 충분하겠지만, 더 자세한 설명이 필요하다면 원문을 정독하는 것을 권한다. Null safety가 나온 이유 Dart에서 null은 Null type으로 표현된다.</description>
    </item>
    <item>
      <title>Retry with Exponential Back-Off and Jitter</title>
      <link>https://cskime.github.io/posts/dart-retry-exp-backoff-jitter/</link>
      <pubDate>Fri, 13 Sep 2024 16:24:35 +0900</pubDate>
      <guid>https://cskime.github.io/posts/dart-retry-exp-backoff-jitter/</guid>
      <description>최근 본 면접에서 새로 알게 된 Exponential Back-Off 라는 개념과 Jitter를 사용한 개선 방법을 공부하고 정리한다. 그리고, Flutter 앱을 개발할 때 이 전략을 활용하기 위해 Dart code로 구현해 본다.
Retry Strategy 어떤 system에서 다른 system을 call하는 상황에서 failure는 언제든지 발생할 수 있다. 앱을 개발할 때는 server 부하 또는 일시적인 network 오류 등에 의해 http 요청이 오랜 시간 동안 완료되지 않거나 실패하는 상황을 떠올릴 수 있다. 이러한 일시적인 문제 때문에 client에서 server로 보내는 data가 유실될 수 있는데, 이것을 막기 위해 여러 가지 방법으로 retry 전략을 세운다.</description>
    </item>
    <item>
      <title>[Dart] DI를 위한 interface 만들기</title>
      <link>https://cskime.github.io/posts/dart-di-interface/</link>
      <pubDate>Tue, 10 Sep 2024 15:19:02 +0900</pubDate>
      <guid>https://cskime.github.io/posts/dart-di-interface/</guid>
      <description>Overview DIP를 준수하는 class 설계를 위해 interface가 필요하다. 이 interface는 일반 class만 사용해도 쉽게 구현할 수 있다. 아래는 clean architecture에서 use case에서 repository 의존성을 분리하여 의존성 흐름이 adapter에서 business logic 계층으로 향하도록 역전시키는 구현 예시이다. Adaptor 계층에서 repository pattern을 사용하여 use case가 repository 의존성을 주입받는다.
class Repository { String fetchData() { throw Exception(&amp;#34;Not implemented&amp;#34;); }; } class RepositoryImpl extends Repository { @override String fetchData() { return storage.getData(); } } class UseCaseImpl extends UseCase { UseCaseImpl({required this.</description>
    </item>
    <item>
      <title>[Flutter] NumberFormat을 사용해서 통화(currency) formatting 하기</title>
      <link>https://cskime.github.io/posts/flutter-number-format-currency/</link>
      <pubDate>Tue, 10 Sep 2024 10:15:36 +0900</pubDate>
      <guid>https://cskime.github.io/posts/flutter-number-format-currency/</guid>
      <description>NumberFormat NumberFormat class는 intl package에서 제공하는 local-specific number formatting class &amp;ldquo;Locale-specific&amp;quot;이란, 문자열을 formatting 할 때 특정 text나 symbol을 locale에 맞게 변환해 주는 것 ICU formatting pattern을 사용해서 number format 지정 0 : a single digit # : a single digit, omitted if the value is zero . : decimal separator ¤(\u00A4) : currency sign Examples NumberFormatter(&amp;#34;###.0#&amp;#34;).format(12.345); // 12.34 Currency formatting NumberFormatter는 currency formatting을 위한 named constructor를 제공함 NumberFormat.currency(locale,name,symbol,decimalDigits,customPattern) locale : ₩, $ 등 화폐 단위를 표기를 위한 locale name : 화폐 단위로 ISO 4217 code 사용 symbol : 화폐 단위로 custom sign 사용 (name을 덮어씀) decimalDigits : 소수점 아래 자릿수 customPattern : custom pattern 사용 Examples (en locale 기준) NumberFormat.</description>
    </item>
    <item>
      <title>[Flutter] Gradient를 적용하는 두 가지 방법</title>
      <link>https://cskime.github.io/posts/flutter-gradient/</link>
      <pubDate>Mon, 09 Sep 2024 16:09:13 +0900</pubDate>
      <guid>https://cskime.github.io/posts/flutter-gradient/</guid>
      <description>Flutter는 두 가지 방법으로 gradient를 적용할 수 있다.
BoxDecoration 사용 ShaderMask 사용 BoxDecoration BoxDecoration의 gradient 속성에 gradient를 적용한다. Box widget을 gradient로 채울 때 사용한다. Example Container( width: 100, height: 100, decoration: const BoxDecoration( gradient: LinearGradient( colors: [Colors.red, Colors.blue], ), ), ), ShaderMask ShaderMask를 사용해서 특정 widget에 shader를 입힐 수 있다.
ShaderMask의 shaderCallback에서 shader 객체를 반환하면 child에 전달한 widget에서 white color인 element에 shader를 입힐 수 있다.
shaderCallback 함수는 LinearGradient 등 gradient 객체의 createShader(rect) method를 사용해서 shader를 반환할 수 있다.</description>
    </item>
    <item>
      <title>[Flutter] Modal bottom sheet 상단에 border radius 주기</title>
      <link>https://cskime.github.io/posts/modalbottomsheet-border-radius/</link>
      <pubDate>Sun, 01 Sep 2024 15:32:44 +0900</pubDate>
      <guid>https://cskime.github.io/posts/modalbottomsheet-border-radius/</guid>
      <description>Scaffold를 사용하는 경우 Modal bottom sheet 안에서 Scaffold의 AppBar를 활용하는 경우 ModalBottomSheetRoute의 border radius와 Clip.hardEdge를 설정한다. showModalBottomSheet()를 사용하는 경우: showModalBottomSheet( context: context, shape: const RoundedRectangleBorder( borderRadius: BorderRadius.vertical( top: Radius.circular(24), ), ), clipBehavior: Clip.hardEdge, builder: (context) =&amp;gt; Scaffold( appBar: AppBar(...), body: Container(...), ), ) Navigator.push에 ModalBottomSheetRoute를 직접 사용하는 경우: final route = MaterialPageRoute( shape: const RoundedRectangleBorder( borderRadius: BorderRadius.vertical( top: Radius.circular(24), ), ), clipBehavior: Clip.hardEdge, builder: (context) =&amp;gt; Scaffold( appBar: AppBar(...), body: Container(.</description>
    </item>
    <item>
      <title>[Flutter] 화면 빈 곳을 tap해서 가상 키보드 닫기</title>
      <link>https://cskime.github.io/posts/flutter-unfocus/</link>
      <pubDate>Thu, 29 Aug 2024 21:00:33 +0900</pubDate>
      <guid>https://cskime.github.io/posts/flutter-unfocus/</guid>
      <description>Flutter app에서 TextField 등의 widget을 탭하면 해당 widget의 FocusNode가 활성화되면서 가상 키보드가 나타남 가상 키보드를 닫으려면 해당 widget의 FocusNode를 비활성화(unfocus) 시켜야 한다. FocusScope 사용 FocusScope는 FocusNode를 하나의 group으로 묶어서 관리할 때 사용하는 widget으로, Route가 push될 때 자동으로 생성되어 widget tree에 추가됨 FocusScope.of(context) method가 반환하는 FocusScopeNode는 FocusNode의 subclass로, FocusScope group 안에서 focus를 제어하는 객체 FocusScopeNode의 unfocus()를 호출해서 현재 focusing된 widget(e.g. TextField)을 unfocus 시킨다. FocusScope.of(context).unfocus(); 또는, requestFocus()에 새로운 FocusNode를 전달하여 이전 focus를 해제시킨다.</description>
    </item>
    <item>
      <title>[Dart] Iterable collections</title>
      <link>https://cskime.github.io/posts/iterable-collections/</link>
      <pubDate>Sat, 17 Aug 2024 13:37:39 +0900</pubDate>
      <guid>https://cskime.github.io/posts/iterable-collections/</guid>
      <description>Iterable collections Dart 문서 읽기
Collection과 Iterable Collection : element의 집합을 표현하는 객체 (e.g. List, Set, Map)
Iterable : element에 순차적으로 접근할 수 있는 collection의 한 종류
Iterable abstract class를 상속받은 List, Set 등을 통해 Iterable 객체 생성
Map은 key를 사용해서 value를 얻는 방식으로 Iterable이 아님. 단, entries나 values 속성을 통해 key 또는 value group을 Iterable 객체로 읽을 수 있음
Iterable과 List는 element에 접근하는 방법에 차이가 있음
List는 [index] operator를 사용하지만, Iterable은 elementAt(index) method를 사용해서 특정 index의 element에 접근</description>
    </item>
    <item>
      <title>[Flutter] Bottom fixed footer를 갖는 scrollable widget 만들기</title>
      <link>https://cskime.github.io/posts/fixed-footer-scrollview/</link>
      <pubDate>Fri, 16 Aug 2024 21:10:26 +0900</pubDate>
      <guid>https://cskime.github.io/posts/fixed-footer-scrollview/</guid>
      <description>이 글에서는 vertical direction scroll을 가정한다.
Overview Scrollable widget은 전체 content 높이가 화면 높이보다 작다면 scroll이 활성화되지 않고 content들이 상단 정렬된다. 아래는 SingleChildScrollView에 Column을 사용해서 content widget과 footer widget을 배치하는 예시이다.
Code Demo Footer widget을 화면 하단에 배치하기 위해 content와 footer widget 사이에 Spacer, Expanded와 같은 flexible widget을 사용하면 unbounded height error가 발생한다. Scrollable widget은 child widget에게 unbounded height constraint를 제안하는데, Spacer나 Expanded도 unbounded size를 갖기 때문이다.
Fixed Footer 구현 위 error를 해결하려면 아래와 같은 조건이 필요하다.</description>
    </item>
    <item>
      <title>[Flutter] 🇰🇷 광복절 기념 태극기 그리기 🇰🇷</title>
      <link>https://cskime.github.io/posts/flutter-taegeukgi/</link>
      <pubDate>Thu, 15 Aug 2024 18:15:39 +0900</pubDate>
      <guid>https://cskime.github.io/posts/flutter-taegeukgi/</guid>
      <description>Overview 광복절을 기념해서 Flutter로 태극기를 그려봤다. (Repository)
태극기 도면을 참고했고, CustomPaint를 사용했다.
깃면 그리기 태극기 깃면의 가로:세로 비율은 3:2이므로, AspectRatio로 3:2 비율의 widget을 만든다. DecoratedBox를 사용해서 border를 그려준다. AspectRatio의 child에 LayoutBuilder를 사용해서 CustomPaint의 size를 깃면 size로 설정한다. CustomPaint는 이 수치를 기반으로 태극 문양과 괘의 layout을 계산한다. 태극 문양 그리기 태극 문양은 아래 두 단계에 걸쳐 그릴 수 있다.
빨간색과 파란색 반으로 나뉜 원을 그린다. 반지름을 지름으로 하는 빨간색, 파란색 원을 왼쪽, 오른쪽에 덮어서 그린다.</description>
    </item>
    <item>
      <title>[Dart] List.from, List.of, toList() 비교</title>
      <link>https://cskime.github.io/posts/list-of-vs-list-from/</link>
      <pubDate>Sun, 04 Aug 2024 10:59:20 +0900</pubDate>
      <guid>https://cskime.github.io/posts/list-of-vs-list-from/</guid>
      <description>Summary 셋 모두 Iterable object를 동일한 element를 가진 새 List로 copy할 때 사용할 수 있다. toList()는 List.of의 short-hand method로 서로 같다. List.from은 original Iterable의 element들을 runtime에 result type으로 casting하고, casting에 실패하면 runtime error를 발생시킨다. List.of는 original Iterable의 element들이 result type과 같거나 하위 type인지 compile-time에 check하고, type이 호환되지 않으면 compile-time error를 발생시킨다. List.from은 original Iterable을 down casting할 때 사용할 수 있고, List.of는 up casting할 때 사용할 수 있다. Copy 할 때 original type을 지켜야 한다면 toList() 또는 List.</description>
    </item>
    <item>
      <title>Nomadcoders Flutter 10주 스터디 후기</title>
      <link>https://cskime.github.io/posts/nomadcoders-flutter-study-review/</link>
      <pubDate>Wed, 31 Jul 2024 14:20:25 +0900</pubDate>
      <guid>https://cskime.github.io/posts/nomadcoders-flutter-study-review/</guid>
      <description>나는 iOS 개발자로 일하다가 지난 해 퇴사 후 안식년을 갖고 있다. 쉬는 동안 개발자라는 직업에 대한 고민을 많이 하고 있는데, 나는 어떤 개발자가 되고 싶은지 방향성을 잃어가고 있다는 생각이 들었기 때문이다. 개발하는 것 자체는 즐거운 일이지만 개발자라는 직업이 정말 나와 맞는지, 개발자를 오래 할 수 있을지 확신이 들지 않았다. 그래서, 쉬는 동안 다양한 개발 분야를 넓게 경험해보면서 생각을 정리해보고 있다.
Flutter 10주 스터디 전에도 노마드코더에서 웹 기초 10주 스터디에 참여했던 적이 있다.</description>
    </item>
    <item>
      <title>GitHub Pages와 Hugo PaperMod 테마로 블로그 만들기</title>
      <link>https://cskime.github.io/posts/github-pages-hugo-papermod-blog/</link>
      <pubDate>Mon, 29 Jul 2024 17:11:44 +0900</pubDate>
      <guid>https://cskime.github.io/posts/github-pages-hugo-papermod-blog/</guid>
      <description>GitHub Pages 블로그를 Hugo PaperMod 테마를 사용해서 블로그를 만든 방법을 기록해 둔다. [PaperMod WiKi - Installation] 문서와 블로그를 참고했다.
Installation Hugo 설치 및 site 생성 (작성일 기준 최신 버전 테마는 Hugo 버전 v0.112.4 이상 필요)
$ brew install hugo $ hugo new site MyFreshWebsite --format yaml Theme 설치 (권장 방식인 git submodule 사용)
# Initialize git repository $ git init &amp;amp;&amp;amp; git commit -am &amp;#34;initial commit&amp;#34; # Install theme $ git submodule add --depth=1 https://github.</description>
    </item>
    <item>
      <title>[Dart] Dart에서 type casting을 안전하게 하는 방법</title>
      <link>https://cskime.github.io/posts/dart-safe-type-cast/</link>
      <pubDate>Sat, 20 Jul 2024 09:10:00 +0900</pubDate>
      <guid>https://cskime.github.io/posts/dart-safe-type-cast/</guid>
      <description>Swift에서는 as?로 안전하게 type casting을 할 수 있었다.
class A {} class B: A {} class C {} let a = A() let b = B() b as? C// nil Dart는 as keyword로 type casting을 할 수 있지만, incompatible type으로 casting을 시도하면 type error가 발생한다. Dart에는 optional casting 연산자가 따로 없으므로, error 없이 type casting을 하려면 type check를 먼저 해야 한다.
class A {} class B extends A {} class C {} final a = A(); final b = B(); a as C // ❗️ type error if (a is C) { a as C // Never executed } if (a is B) { a as B // ✅ OK } 매번 type check를 하려면 번거로우므로, 아래와 같은 extension을 만들어서 사용하면 편리하다.</description>
    </item>
    <item>
      <title>[Flutter] &#39;customizable_text&#39; package 개발 기록</title>
      <link>https://cskime.github.io/posts/customizable_text_package_review/</link>
      <pubDate>Wed, 26 Jun 2024 15:11:00 +0900</pubDate>
      <guid>https://cskime.github.io/posts/customizable_text_package_review/</guid>
      <description>개발 동기 노마드코더 챌린지 과제 중 아래와 같은 text UI를 구현하는 부분이 있었다. 회원가입 중 이용 약관이나 개인 정보 처리 방침 등을 사용자에게 안내하고 관련 외부 문서로 이동하여 확인할 수 있게 만드는 보편적인 UI 이다.
Flutter에서 text에 다양한 style을 적용할 때 RichText 또는 Text.rich를 사용하므로, 이 UI를 구현하기 위해 아래와 같이 코드를 작성했다.
이렇게 코드를 작성하면 몇 가지 문제가 있다.
다른 style을 사용할 text를 직접 분류해서 나누어 작성해야 하므로 실수할 가능성이 있다.</description>
    </item>
    <item>
      <title>[Flutter] Flutter Constraint 이해하기</title>
      <link>https://cskime.github.io/posts/flutter-constraints/</link>
      <pubDate>Tue, 25 Jun 2024 16:09:00 +0900</pubDate>
      <guid>https://cskime.github.io/posts/flutter-constraints/</guid>
      <description>Flutter Constraint와 Layout Flutter는 3단계를 거쳐 widget의 layout을 결정한다.
Constraints go down : Parent widget이 child widget에 constraint를 제안한다. Sizes go up : Child widget은 constraint 범위 내의 size를 parent widget에 알려준다. Parent sets position : Parent widget은 자신의 alignment 정보와 child widget size를 사용해서 child widget의 position을 결정한다. 여기서 &amp;ldquo;constraint&amp;ldquo;란 size의 최대 ~ 최소값의 범위를 말한다. Flutter에서는 BoxConstraints class를 주로 사용하여 minWidth, minHeight, maxWidth, maxHeight을 정의한다.
const BoxConstraints({ this.minWidth = 0.</description>
    </item>
    <item>
      <title>[Flutter] Scrollable TabBar의 왼쪽 여백 제거하기</title>
      <link>https://cskime.github.io/posts/tabbar-remove-left-padding/</link>
      <pubDate>Sun, 23 Jun 2024 07:28:19 +0900</pubDate>
      <guid>https://cskime.github.io/posts/tabbar-remove-left-padding/</guid>
      <description>TabBar의 isScrollable을 true로 설정하면 왼쪽에 default padding이 잡힘 Flutter 3.16.0 버전부터 Material 3 디자인이 적용되면서, isScrollable이 true일 때 tabAlignment 속성의 기본값이 TabAlignment.startOffset이 됨 Material3 에서 TabBar의 기본 alignment Material2 에서 TabBar의 기본 alignment TabAlignment.startOffset은 왼쪽에 52px offset을 추가하기 때문에 왼쪽에 여백이 생기는 것 따라서, 아래 세 가지 방법으로 left offset을 제거할 수 있다. Material 3를 사용하지 않도록 설정 TabBar.tabAlignment를 TabAlignment.start로 설정 TabBar.padding에 EdgeInsets.only(left: 10)처럼 원하는 offset으로 override Reference Scrollable Tabs have a gap on the left | GitHub Issue Customizing tabs alignment using the new TabBar.</description>
    </item>
    <item>
      <title>[Flutter] ListView에 Clip.none 설정 시 item이 사라지는 문제</title>
      <link>https://cskime.github.io/posts/listview-clip-item-disappear/</link>
      <pubDate>Sat, 22 Jun 2024 07:27:19 +0900</pubDate>
      <guid>https://cskime.github.io/posts/listview-clip-item-disappear/</guid>
      <description>문제 상황 ListView를 Clip.none으로 설정하면 item들이 scroll될 때 ListView의 실제 영역을 벗어나서 화면 밖으로 사라질 때 까지 화면에 유지될 것이라고 예상 하지만 실제로는 item이 화면 밖으로 나가기 전에 먼저 화면에서 사라짐 이 ListView는 Padding 및 다른 widget들의 하위 widget 원인 분석 Flutter GitHub에 이미 같은 문제로 issue가 올라왔었다. 이 repo의 contributor에 따르면, 이것은 의도된 동작이라고 한다. it looks like this is working as intended.. The Padding around the ListView is what is causing this effect.</description>
    </item>
    <item>
      <title>[Flutter] Navigator.push로 띄운 widget에서 InheritedWidget에 접근할 수 없는 문제</title>
      <link>https://cskime.github.io/posts/inherited-widget-unaccessible/</link>
      <pubDate>Sat, 25 May 2024 17:11:44 +0900</pubDate>
      <guid>https://cskime.github.io/posts/inherited-widget-unaccessible/</guid>
      <description>문제 상황 상위 위젯에서 추가한 InheritedWidget을 하위 widget에서 접근하지 못하는 문제 BuildContext.dependOnInheritedWidgetOfExactType이 null을 반환해서 property 및 method를 호출할 수 없음 예제 코드 문제를 재현하는 간단한 counter app
HomeScreen 및 DetailScreen은 버튼을 눌러서 count 증가
HomeScreen과 DetailScreen은 count 값(state) 공유
Count 값을 하위 widget에 공유하기 위한 InheritedWidget 생성
class CounterProvider extends InheritedWidget { const CounterProvider({ super.key, required super.child, required this.counter, required this.incrementCounter, }); final int counter; // ✅ count 값 공유 final void Function() incrementCounter; // ✅ count action 공유 @override bool updateShouldNotify(covariant InheritedWidget oldWidget) =&amp;gt; true; static CounterProvider?</description>
    </item>
    <item>
      <title>All About Date and Time</title>
      <link>https://cskime.github.io/posts/all-about-date-and-time/</link>
      <pubDate>Wed, 13 Mar 2024 19:55:58 +0900</pubDate>
      <guid>https://cskime.github.io/posts/all-about-date-and-time/</guid>
      <description>위도와 경도 위도(latitude) : 적도를 기준으로 북쪽 또는 남쪽으로 떨어진 위치 (도(°) 단위) 경도(longitude) : 본초 자오선을 기준으로 동쪽 또는 서쪽으로 떨어진 위치 (도(°) 단위) 180°E ~ 180°W (동경 180° ~ 서경 180°) 까지의 범위 안에 위치 경도 15°로 1시간의 시차가 생긴다. 자오선 자오선(Meridian) 또는 경선 북극점과 남극점을 최단 거리로 연결하는 세로선 동경(E, X E, X East) : 자오선의 동쪽 서경(W, Y W, Y West) : 자오선의 서쪽 동경과 서경은 180°까지 있고, 동서경 180°는 일치한다.</description>
    </item>
    <item>
      <title>[iOS] iOS Hit Testing</title>
      <link>https://cskime.github.io/posts/ios-hit-testing/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://cskime.github.io/posts/ios-hit-testing/</guid>
      <description>Hit Testing Hit test는 사용자 event가 발생할 때 view 계층(hierarchy)에서 subview들을 탐색(traverse)하며 event를 처리할 view를 결정하는 과정이다. Root view부터 시작하여 subview들을 역방향으로 탐색하며, event 발생 위치(point)를 포함하는 view가 있다면 그 view의 subview들을 같은 방법으로 탐색해 나간다.
&amp;lsquo;역방향&amp;rsquo;으로 탐색하는 이유는, 화면의 가장 앞에 위치한 view부터 탐색하기 위함이다. 여러 개의 view가 겹쳐있다면 사용자가 보게 되는 맨 앞의 view가 event를 가져가야 한다. 화면의 가장 앞에 있는 view는 다음과 같은 특징을 가진다.
z-order index(depth)가 가장 크다.</description>
    </item>
  </channel>
</rss>
